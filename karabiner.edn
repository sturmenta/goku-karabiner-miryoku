{

 :devices {:keychron_k2v2 [{:product_id 591 :vendor_id 1452}]}

 :profiles {
  :goku {
   :default true

   ; simultaneous_threshold_milliseconds (def: 50)
   ; different from simlayers, this is for cases like [:a :b]
   :sim     50

   ; to_delayed_action_delay_milliseconds
   ; NOTE: this should be equal to :held for mod-tap layers
   :delay   210

   ; to_if_held_down_threshold_milliseconds (def: 500)
   ; NOTE: this should be equal to :delay for mod-tap layers
   :held    210

   ; to_if_alone_timeout_milliseconds (def: 1000)
   ; NOTE: (i think) this must be just less than the delay / held value to avoid bug where mod-tap layer stays 1
   :alone   209

   ;you can set these delays individually in mod-tap layer definitions if you want separate default values here
  }
 }

 ; mapping of all miryoku layout keys for "from" section
 :froms {
  :any_key {:any :key_code}

  ;;
  ;; left side
  ;;

  ; first row
  :-q {:key :##1}
  :-w {:key :##2}
  :-e {:key :##3}
  :-r {:key :##4}
  :-t {:key :##5}

  ; second row
  :-a {:key :##q}
  :-s {:key :##w}
  :-d {:key :##e}
  :-f {:key :##r}
  :-g {:key :##t}

  ; third row
  :-z {:key :##a}
  :-x {:key :##s}
  :-c {:key :##d}
  :-v {:key :##f}
  :-b {:key :##g}

  ; modifiers
  :-escape {:key :##x}
  :-left_option {:key :##c}
  :-tab {:key :##v}

  ;;
  ;; right side
  ;;

  ; first row
  :-y {:key :##8}
  :-u {:key :##9}
  :-i {:key :##0}
  :-o {:key :##hyphen}
  :-p {:key :##equal_sign}

  ; second row
  :-h {:key :##u}
  :-j {:key :##i}
  :-k {:key :##o}
  :-l {:key :##p}
  :-quote {:key :##open_bracket}

  ; third row
  :-n {:key :##j}
  :-m {:key :##k}
  :-comma {:key :##l}
  :-period {:key :##semicolon}
  :-slash {:key :##quote}

  ; modifiers
  :-return_or_enter {:key :##m}
  :-spacebar {:key :##comma}
  :-delete_or_backspace {:key :##period}
 }

 :main [

        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "check current keyboard and set karabiner_on" :rules [
          [:condi :!karabiner_on :keychron_k2v2]
            [:any_key ["karabiner_on" 1]]
        ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;NOTE: When adding a new layer, if you want it to be able to cross with an old one, you must add the name negated (:!new_name) to all other mod-tap layer conditions
        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "modifier layers" :rules [
          [:condi :karabiner_on]

          ;; ─────────────────────────────────────────────────────────────

          ;;
          ;; left side
          ;;

           ;l_shift (z)
           [:-z nil [
              :!l_ctrl :!l_option :!l_cmd ;without :!l_shift
              :!r_shift
              :!layer_1 :!layer_2
            ] {:alone {:key
            :z :halt true} :delayed {:canceled {:key
            :z }} :held {:set [
            "l_shift" 1] :repeat false} :afterup {:set [
            "l_shift" 0]}}]

           ;l_ctrl (escape)
           [:-escape nil [
              :!l_shift :!l_option :!l_cmd ;without :!l_ctrl
              :!r_shift
              :!layer_1 :!layer_2
            ] {:alone {:key
            :escape :halt true} :delayed {:canceled {:key
            :escape }} :held {:set [
            "l_ctrl" 1] :repeat false} :afterup {:set [
            "l_ctrl" 0]}}]

           ;l_option (left_option)
           [:-left_option nil [
              :!l_shift :!l_ctrl :!l_cmd ;without :!l_option
              :!r_shift
              :!layer_1 :!layer_2
            ] {:alone {:key
            :left_option :halt true} :delayed {:canceled {:key
            :left_option }} :held {:set [
            "l_option" 1] :repeat false} :afterup {:set [
            "l_option" 0]}}]

           ;l_cmd (tab)
           [:-tab nil [
              :!l_shift :!l_ctrl :!l_option ;without :!l_cmd
              :!r_shift
              :!layer_1 :!layer_2
            ] {:alone {:key
            :tab :halt true} :delayed {:canceled {:key
            :tab }} :held {:set [
            "l_cmd" 1] :repeat false} :afterup {:set [
            "l_cmd" 0]}}]

          ;; ─────────────────────────────────────────────────────────────

          ;;
          ;; right side
          ;;

           ;r_shift (slash)
           [:-slash nil [
              :!l_shift :!l_ctrl :!l_option :!l_cmd
              ;without :!r_shift
              :!layer_1 :!layer_2
            ] {:alone {:key
            :slash :halt true} :delayed {:canceled {:key
            :slash}} :held {:set [
            "r_shift" 1] :repeat false} :afterup {:set [
            "r_shift" 0]}}]

          ; ─────────────────────────────────────────────────────────────

          ;;
          ;; layers
          ;;

          ;layer_1 (numbers and symbols) (spacebar)
           [:-spacebar nil [
              :!l_shift :!l_ctrl :!l_option :!l_cmd
              :!r_shift
              :!layer_2 ;without :!layer_1
            ] {:alone {:key
            :spacebar :halt true} :delayed {:canceled {:key
            :spacebar}} :held {:set [
            "layer_1" 1] :repeat false} :afterup {:set [
            "layer_1" 0]}}]

          ;layer_2 (fn layer) (delete_or_backspace)
           [:-delete_or_backspace nil [
              :!l_shift :!l_ctrl :!l_option :!l_cmd
              :!r_shift
              :!layer_1 ;without :!layer_2
            ] {:alone {:key
            :delete_or_backspace :halt true} :delayed {:canceled {:key
            :delete_or_backspace}} :held {:set [
            "layer_2" 1] :repeat false} :afterup {:set [
            "layer_2" 0]}}]

          ]

          ;; ─────────────────────────────────────────────────────────────
         }
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "l_shift" :rules
         [
          [:condi :l_shift :karabiner_on]

          ; ────────────────────────────────────────────────────────────────────────────────────
          ; ignore another keys
          [:any_key [:vk_none]]
         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "l_ctrl" :rules
         [
          [:condi :l_ctrl :karabiner_on]

          ; ────────────────────────────────────────────────────────────────────────────────────
          ; ignore another keys
          [:any_key [:vk_none]]
         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "l_option" :rules
         [
          [:condi :l_option :karabiner_on]

          ; ────────────────────────────────────────────────────────────────────────────────────
          ; ignore another keys
          [:any_key [:vk_none]]
         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "l_cmd" :rules
         [
          [:condi :l_cmd :karabiner_on]

          ; ────────────────────────────────────────────────────────────────────────────────────
          ; ignore another keys
          [:any_key [:vk_none]]
         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "layer_1 - (numbers and symbols) (spacebar)" :rules
         [
          [:condi :layer_1 :karabiner_on]

          ; ────────────────────────────────────────────────────────────────────────────────────
          ; ignore another keys
          [:any_key [:vk_none]]
         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "layer_2 - (fn layer) (delete_or_backspace)" :rules
         [
          [:condi :layer_2 :karabiner_on]

          ; ────────────────────────────────────────────────────────────────────────────────────
          ; ignore another keys
          [:any_key [:vk_none]]
         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "r_shift" :rules
         [;
          [:condi :r_shift :karabiner_on]

          ; ────────────────────────────────────────────────────────────────────────────────────
          ; ignore another keys
          [:any_key                   :vk_none]
         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        {:des "karabiner-on-off by pressing caps_lock twice"
         :rules [

          ; second time caps_lock_pressed & karabiner_off
          [:condi :caps_lock_pressed :!karabiner_on] ; order matters
           [:##caps_lock ; from
            [:##caps_lock ["karabiner_on" 1] [:noti :on-off "Karabiner On 🟢"]] ; to
            nil ; conditions
            {:delayed {:invoked [:noti :on-off]} :params {:delay 1000}} ; other options ; (close notification after 1 second)
           ]

          ; second time caps_lock_pressed & karabiner_on
          [:condi :caps_lock_pressed :karabiner_on] ; order matters
           [:##caps_lock ; from
            [:##caps_lock ["karabiner_on" 0] [:noti :on-off "Karabiner Off 🔴"]] ; to
            nil ; conditions
            {:delayed {:invoked [:noti :on-off]} :params {:delay 1000}} ; other options ; (close notification after 1 second)
           ]

          ; first time caps_lock_pressed
          [:condi :!caps_lock_pressed]
           [:##caps_lock ; from
            [:##caps_lock ["caps_lock_pressed" 1]] ; to
            nil ; conditions
            {:delayed { :invoked ["caps_lock_pressed" 0] :canceled ["caps_lock_pressed" 0]}} ; other options ; (set caps_lock_pressed to 0 after some time or if caps_lock is pressed again)
           ]

         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        {:des "Base characters" :rules
         [;
          ; use the mappings from "froms" to map all keys
          ;
          [:condi :karabiner_on]
          ;
          ;; ───────────────────────────────
          ;;
          ;; left side
          ;;
          ;;
          [:-q                          :q]
          [:-w                          :w]
          [:-e                          :e]
          [:-r                          :r]
          [:-t                          :t]
          ;; ───────────────────────────────
          [:-a                          :a]
          [:-s                          :s]
          [:-d                          :d]
          [:-f                          :f]
          [:-g                          :g]
          ;; ───────────────────────────────
          ;[:-z                         :z]             (this mapping was already done in layers_mode)
          [:-x                          :x]
          [:-c                          :c]
          [:-v                          :v]
          [:-b                          :b]
          ;;  ───────────────────────────────
          ;[:-escape                    :escape]        (this mapping was already done in layers_mode)
          ;[:-left_option               :left_option]   (this mapping was already done in layers_mode)
          ;[:-tab                       :tab]           (this mapping was already done in layers_mode)

          ;;  ───────────────────────────────
          ;;
          ;; right side
          ;;
          ;;
          [:-y                          :y]
          [:-u                          :u]
          [:-i                          :i]
          [:-o                          :o]
          [:-p                          :p]
          ;; ───────────────────────────────
          [:-h                          :h]
          [:-j                          :j]
          [:-k                          :k]
          [:-l                          :l]
          [:-quote                      :quote]
          ;; ───────────────────────────────
          [:-n                          :n]
          [:-m                          :m]
          [:-comma                      :comma]
          [:-period                     :period]
          ;[:-slash                     :slash]                 (this mapping was already done in layers_mode)
          ;; ───────────────────────────────
          [:-return_or_enter            :return_or_enter]
          ;[:-spacebar                  :spacebar]              (this mapping was already done in layers_mode)
          ;[:-delete_or_backspace       :delete_or_backspace]   (this mapping was already done in layers_mode)


          ; ignore another keys
          [:any_key [:vk_none]]
          ]}
        ;; ─────────────────────────────────────────────────────────────────────────────
       ]
 }
;;
;;
;;
;;
;;
;; ─────────────────────────────────────────────────────────────────────────────
;; ─────────────────────────────────────────────────────────────────────────────
;;
;;  how to make logs:
;;
;;      console.log("ctrl") -> [:noti :noti-id "ctrl"] (use [:noti :noti-id] to clear after use)
;;
;; ─────────────────────────────────────────────────────────────────────────────
;;
;; rule [:period ["media-mode" 1] nil {:afterup ["media-mode" 0] :alone :period}]
;;       |_____| |_______________| |_| |_________________________________________|
;;        <from>    <to>      <conditions>         <other options>
;;
;; ─────────────────────────────────────────────────────────────────────────────
;;
;;  commands:
;;
;;      !  | means mandatory
;;      #  | means optional
;;      C  | left_command
;;      T  | left_control
;;      O  | left_option
;;      S  | left_shift
;;      F  | fn
;;      Q  | right_command
;;      W  | right_control
;;      E  | right_option
;;      R  | right_shift
;;      P  | caps_lock
;;      !! | mandatory command + control + optional + shift (hyper)
;;      ## | optional any
;;
;; ─────────────────────────────────────────────────────────────────────────────
;; ─────────────────────────────────────────────────────────────────────────────