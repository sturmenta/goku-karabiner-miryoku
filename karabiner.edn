;Mod-Tap Layers example ;https://github.com/gabriel-gardner/modtap-karabiner/blob/main/modtap_example.edn

{
 :profiles {
            :goku {
                      :default true

                      ; simultaneous_threshold_milliseconds (def: 50)
                      ; different from simlayers, this is for cases like [:a :b]
                      :sim     50

                      ; to_delayed_action_delay_milliseconds
                      ; NOTE: this should be equal to :held for mod-tap layers
                      :delay   210

                      ; to_if_held_down_threshold_milliseconds (def: 500)
                      ; NOTE: this should be equal to :delay for mod-tap layers
                      :held    210

                      ; to_if_alone_timeout_milliseconds (def: 1000)
                      ; NOTE: (i think) this must be just less than the delay / held value to avoid bug where mod-tap layer stays 1
                      :alone   209

                      ;you can set these delays individually in mod-tap layer definitions if you want separate default values here
                      }
            }

 :main [

        ;NOTE: When adding a new layer, if you want it to be able to cross with an old one, you must add the name negated (:!new_name) to all other mod-tap layer conditions
        {
         :des "mod-tap layers"
         :rules [
                 ;ls-mode (r)
                 [:r nil
                  [:!rs-mode] {:alone {:key
                  :r :halt true} :delayed {:canceled {:key
                  :r }} :held {:set [
                  "ls-mode" 1] :repeat false} :afterup {:set [
                  "ls-mode" 0]}}]

                 ;rs-mode (i)
                 [:i nil
                  [:!ls-mode] {:alone {:key
                  :i :halt true} :delayed {:canceled {:key
                  :i}} :held {:set [
                  "rs-mode" 1] :repeat false} :afterup {:set [
                  "rs-mode" 0]}}]
                ]
        }

        {
         :des "ls-mode"
         :rules [
                 :ls-mode
                 [:i [:!Si]]
                ]
        }

        {
         :des "rs-mode"
         :rules [
                 :rs-mode
                 [:r [:!Sr]]
                ]
        }
       ]
 }