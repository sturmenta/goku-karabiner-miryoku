;Mod-Tap Layers example ;https://github.com/gabriel-gardner/modtap-karabiner/blob/main/modtap_example.edn

{
 :profiles {
  :goku {
   :default true

   ; simultaneous_threshold_milliseconds (def: 50)
   ; different from simlayers, this is for cases like [:a :b]
   :sim     50

   ; to_delayed_action_delay_milliseconds
   ; NOTE: this should be equal to :held for mod-tap layers
   :delay   210

   ; to_if_held_down_threshold_milliseconds (def: 500)
   ; NOTE: this should be equal to :delay for mod-tap layers
   :held    210

   ; to_if_alone_timeout_milliseconds (def: 1000)
   ; NOTE: (i think) this must be just less than the delay / held value to avoid bug where mod-tap layer stays 1
   :alone   209

   ;you can set these delays individually in mod-tap layer definitions if you want separate default values here
  }
 }

 ; keyboard all keys mapping for "from" section
 :froms {
  :any_key {:any :key_code}

  ;;
  ;; left side
  ;;

  ; first row
  :-q {:key :##1}
  :-w {:key :##2}
  :-e {:key :##3}
  :-r {:key :##4}
  :-t {:key :##5}

  ; second row
  :-a {:key :##q}
  :-s {:key :##w}
  :-d {:key :##e}
  :-f {:key :##r}
  :-g {:key :##t}

  ; third row
  :-z {:key :##a}
  :-x {:key :##s}
  :-c {:key :##d}
  :-v {:key :##f}
  :-b {:key :##g}

  ; modifiers
  :-escape {:key :##x}
  :-spacebar {:key :##c}
  :-tab {:key :##v}

  ;;
  ;; right side
  ;;

  ; first row
  :-y {:key :##8}
  :-u {:key :##9}
  :-i {:key :##0}
  :-o {:key :##hyphen}
  :-p {:key :##equal_sign}

  ; second row
  :-h {:key :##u}
  :-j {:key :##i}
  :-k {:key :##o}
  :-l {:key :##p}
  :-quote {:key :##open_bracket}

  ; third row
  :-n {:key :##j}
  :-m {:key :##k}
  :-comma {:key :##l}
  :-period {:key :##semicolon}
  :-slash {:key :##quote}

  ; modifiers
  :-return_or_enter {:key :##m}
  :-delete_or_backspace {:key :##comma}
  :-delete_forward {:key :##period}
 }

 :main [

        ;NOTE: When adding a new layer, if you want it to be able to cross with an old one, you must add the name negated (:!new_name) to all other mod-tap layer conditions
        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "modifier layers" :rules [
          [:condi :karabiner_on]

          ;; ─────────────────────────────────────────────────────────────

          ;;
          ;; left side
          ;;

           ;ls-mode (f)
           [:-f nil
            [:!rs-mode] {:alone {:key
            :f :halt true} :delayed {:canceled {:key
            :f }} :held {:set [
            "ls-mode" 1] :repeat false} :afterup {:set [
            "ls-mode" 0]}}]

          ;; ─────────────────────────────────────────────────────────────

          ;;
          ;; right side
          ;;

           ;rs-mode (j)
           [:-j nil
            [:!ls-mode] {:alone {:key
            :j :halt true} :delayed {:canceled {:key
            :j}} :held {:set [
            "rs-mode" 1] :repeat false} :afterup {:set [
            "rs-mode" 0]}}]
          ]

          ;; ─────────────────────────────────────────────────────────────
         }
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "ls-mode" :rules
         [
          [:condi :ls-mode :karabiner_on]

          ; first row
          [:-y [:!Sy]]
          [:-u [:!Su]]
          [:-i [:!Si]]
          [:-o [:!So]]
          [:-p [:!Sp]]

          ; second row
          [:-h [:!Sh]]
          [:-j [:!Sj]]
          [:-k [:!Sk]]
          [:-l [:!Sl]]
          [:-quote [:!Squote]]

          ; third row
          [:-n [:!Sn]]
          [:-m [:!Sm]]
          [:-comma [:!Scomma]]
          [:-period [:!Speriod]]
          [:-slash [:!Sslash]]

          ; modifiers left row
          [:-escape [:!Sescape]]
          [:-spacebar [:!Sspacebar]]
          [:-tab [:!Stab]]

          ; modifiers right row
          [:-return_or_enter [:!Sreturn_or_enter]]
          [:-delete_or_backspace [:!Sdelete_or_backspace]]
          [:-delete_forward [:!Sdelete_forward]]

          ; ignore another keys
          [:any_key [:vk_none]]
         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        { :des "rs-mode" :rules
         [;
          [:condi :rs-mode :karabiner_on]

          ; first row
          [:-q [:!Rq]]
          [:-w [:!Rw]]
          [:-e [:!Re]]
          [:-r [:!Rr]]
          [:-t [:!Rt]]

          ; second row
          [:-a [:!Ra]]
          [:-s [:!Rs]]
          [:-d [:!Rd]]
          [:-f [:!Rf]]
          [:-g [:!Rg]]

          ; third row
          [:-z [:!Rz]]
          [:-x [:!Rx]]
          [:-c [:!Rc]]
          [:-v [:!Rv]]
          [:-b [:!Rb]]

          ; modifiers left row
          [:-escape [:!Rescape]]
          [:-spacebar [:!Rspacebar]]
          [:-tab [:!Rtab]]

          ; modifiers right row
          [:-return_or_enter [:!Rreturn_or_enter]]
          [:-delete_or_backspace [:!Rdelete_or_backspace]]
          [:-delete_forward [:!Rdelete_forward]]

          ; ignore another keys
          [:any_key [:vk_none]]
         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        {:des "karabiner-on-off by pressing caps_lock twice"
         :rules [

          ; second time caps_lock_pressed & karabiner_off
          [:condi :caps_lock_pressed :!karabiner_on] ; order matters
           [:##caps_lock ; from
            [:##caps_lock ["karabiner_on" 1] [:noti :on-off "ON"]] ; to
            nil ; conditions
            {:delayed {:invoked [:noti :on-off]} :params {:delay 1000}} ; other options ; (close notification after 1 second)
           ]

          ; second time caps_lock_pressed & karabiner_on
          [:condi :caps_lock_pressed :karabiner_on] ; order matters
           [:##caps_lock ; from
            [:##caps_lock ["karabiner_on" 0] [:noti :on-off "OFF"]] ; to
            nil ; conditions
            {:delayed {:invoked [:noti :on-off]} :params {:delay 1000}} ; other options ; (close notification after 1 second)
           ]

          ; first time caps_lock_pressed
          [:condi :!caps_lock_pressed]
           [:##caps_lock ; from
            [:##caps_lock ["caps_lock_pressed" 1]] ; to
            nil ; conditions
            {:delayed { :invoked ["caps_lock_pressed" 0] :canceled ["caps_lock_pressed" 0]}} ; other options ; (set caps_lock_pressed to 0 after some time or if caps_lock is pressed again)
           ]

         ]}
        ;; ─────────────────────────────────────────────────────────────────────────────

        ;; ─────────────────────────────────────────────────────────────────────────────
        {:des "Base characters" :rules
         [;
          ; use the mappings from "froms" to map all keys
          ;
          [:condi :karabiner_on :!ls-mode :!rs-mode]
          ;
          ;; ───────────────────────────────
          ;;
          ;; left side
          ;;
          ;;
          [:-q                          :q]
          [:-w                          :w]
          [:-e                          :e]
          [:-r                          :r]
          [:-t                          :t]
          ;; ───────────────────────────────
          [:-a                          :a]
          [:-s                          :s]
          [:-d                          :d]
         ;[:-f                          :f] (this mapping was already done in ls_mode)
          [:-g                          :g]
          ;; ───────────────────────────────
          [:-z                          :z]
          [:-x                          :x]
          [:-c                          :c]
          [:-v                          :v]
          [:-b                          :b]
          ;;  ───────────────────────────────
          [:-escape                     :escape]
          [:-spacebar                   :spacebar]
          [:-tab                        :tab]

          ;;  ───────────────────────────────
          ;;
          ;; right side
          ;;
          ;;
          [:-y                          :y]
          [:-u                          :u]
          [:-i                          :i]
          [:-o                          :o]
          [:-p                          :p]
          ;; ───────────────────────────────
          [:-h                          :h]
          [:-j                          :j]
          [:-k                          :k]
          [:-l                          :l]
          [:-quote                      :quote]
          ;; ───────────────────────────────
          [:-n                          :n]
          [:-m                          :m]
          [:-comma                      :comma]
          [:-period                     :period]
          [:-slash                      :slash]
          ;; ───────────────────────────────
          [:-return_or_enter            :return_or_enter]
          [:-delete_or_backspace        :delete_or_backspace]
          [:-delete_forward             :delete_forward]


          ; ignore another keys
          [:any_key [:vk_none]]
          ]}
        ;; ─────────────────────────────────────────────────────────────────────────────
       ]
 }
;;
;;
;;
;;
;;
;; ─────────────────────────────────────────────────────────────────────────────
;; ─────────────────────────────────────────────────────────────────────────────
;;
;;  how to make logs:
;;
;;      console.log("ctrl") -> [:noti :noti-id "ctrl"] (use [:noti :noti-id] to clear after use)
;;
;; ─────────────────────────────────────────────────────────────────────────────
;;
;; rule [:period ["media-mode" 1] nil {:afterup ["media-mode" 0] :alone :period}]
;;       |_____| |_______________| |_| |_________________________________________|
;;        <from>    <to>      <conditions>         <other options>
;;
;; ─────────────────────────────────────────────────────────────────────────────
;;
;;  commands:
;;
;;      !  | means mandatory
;;      #  | means optional
;;      C  | left_command
;;      T  | left_control
;;      O  | left_option
;;      S  | left_shift
;;      F  | fn
;;      Q  | right_command
;;      W  | right_control
;;      E  | right_option
;;      R  | right_shift
;;      P  | caps_lock
;;      !! | mandatory command + control + optional + shift (hyper)
;;      ## | optional any
;;
;; ─────────────────────────────────────────────────────────────────────────────
;; ─────────────────────────────────────────────────────────────────────────────